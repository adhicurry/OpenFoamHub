/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         localEuler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default             none;                                   //  Increasing order / accuracy                                                                
    div(phi,U)          Gauss linearUpwind grad(U);                   //  Gauss upwind     /  Gauss linearUpwind grad(U)           /  Gauss linear
    div(phi,K)          Gauss linearUpwind grad(omega);               //  Gauss upwind     /  Gauss linearUpwind grad(omega)       /  Gauss limitedLinear 1
    div(phi,h)          Gauss upwind;                           //  Gauss upwind     /  NOT SURE                             / ...
    div(phi,k)          Gauss linearUpwind grad(omega);               //  Gauss upwind     /  Gauss linearUpwind grad(omega)       /  Gauss limitedLinear 1
    div(phi,omega)      Gauss upwind grad(omega);               //  Gauss upwind     /  Gauss linearUpwind grad(omega)       /  Gauss limitedLinear 1
    div(phi,epsilon)    Gauss upwind;                           //  Gauss upwind     /  Gauss linearUpwind grad(epsilon??)   /  NOT SURE
    div(phi,R)          Gauss upwind;                           //  NOT SURE         /  ...                                  /  ...
    div(R)              Gauss linear;                           //  NOT SURE         /  ...                                  /  ...
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;           //  Gauss linear     /  NOT SURE    / ...                    /  ...
    div(((rho*(thermo:mu|rho))*dev2(T(grad(U))))) Gauss linear;
    div((rho*R))        Gauss linear;
    div(phi,Yi_h)       Gauss upwind;                           //  Gauss upwind     /	NOT SURE    / ...                    /  ...
    div(Ji,Ii_h)        Gauss upwind;
}

laplacianSchemes
{
    default         Gauss linear orthogonal;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         orthogonal;
}

wallDist
{
    method              meshWave;
}

// ************************************************************************* //
